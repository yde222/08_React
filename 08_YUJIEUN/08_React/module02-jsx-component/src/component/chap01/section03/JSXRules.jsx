/*JSX에서 주의해야 할 문법 규칙

JSX는 HTML과 유사해 보이지만, 몇 가지 중요한 문법 규칙을 따라야 한다.
이러한 규칙들을 이해하고 준수하는 것이 오류 없는 React 코드를 작성하는 데 중요하다.

주요 규칙:
1. 하나의 최상위 요소로 감싸야 함 -> 플래그먼트 
2. 모든 태그는 닫혀야 함 -> (페어 방식과 싱글 클로즈 태그 방식 모두 닫아야함)
3. JSX 내에서 JavaScript 조건문 사용시 -> {} 내부에 작성
4. 예약어와 속성 이름 (class → className) -> js 방식으로 속성 참조
5. 주석 작성 방법 -> 중괄호 내부에 작성 {}
*/

export default function JSXRules() {
    return (
        /*1. 하나의 최상위 요소 규칙
                React의 컴포넌트는 반드시 하나의 최상위 요소(루트 노드)로 감싸져 있어야 한다.

                그 이유는 다음과 같다:
                -DOM 트리 구조의 일관성 : HTML과 마찬가지로, DOM(Document Object Model)은 트리 구조로 이루어져 있다. 
                                    트리 구조의 기본 원칙은 반드시 하나의 루트(최상위) 노드가 존재해야 하며, 모든 자식 노드는 이 루트 노드 아래에 위치해야 한다. 
                                    만약 여러 개의 형제 노드가 루트 없이 나란히 존재한다면, 트리 구조가 성립하지 않아 DOM 파싱 및 렌더링에 문제가 발생한다.

                - 컴포넌트 반환값의 명확성: React 컴포넌트는 함수(또는 클래스)로 구현되며, 이 함수는 하나의 값을 반환해야 한다. 
                                    여러 개의 JSX 요소를 반환하려면, 하나의 부모 요소로 감싸서 단일 값으로 만들어야 한다. 
                                    그렇지 않으면 JavaScript 문법상 오류가 발생한다.

                -가상 DOM의 효율적 비교 : React는 가상 DOM(Virtual DOM)을 사용하여 변경 사항을 효율적으로 감지하고 실제 DOM에 반영한다. 
                                    이 과정에서 각 컴포넌트가 하나의 루트 노드를 가지면, 변경 감지 및 트리 비교가 훨씬 단순하고 효율적으로 이루어진다.

                - HTML 파서 및 브라우저 호환성: 브라우저의 HTML 파서 역시 하나의 루트 엘리먼트(예: <body> 또는 <html>)를 요구한다. 
                                    여러 개의 루트 노드가 있으면 브라우저가 예기치 않게 동작할 수 있다.

                잘못된 예 : 
                return (
                  <h1>제목</h1>
                  <p>내용</p>
                );

                이러한 이유로, 여러 JSX 요소를 반환할 때는 반드시 하나의 부모 요소(div, section 등)나 React.Fragment(<> </>)로 감싸야 한다.
                Fragment는 실제 DOM에 불필요한 노드를 추가하지 않고 여러 요소를 그룹화할 수 있게 해준다.
                */
    );
}